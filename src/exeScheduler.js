'use strict';

var fs                          = require('fs');
var path                        = require('path');
var mkdirp                      = require('mkdirp')
const uuidv1                    = require('uuid/v1');
var crypto                      = require('crypto');
var sqlite3                     = require('sqlite3');
var os                          = require('os')
var perf                        = require('./perf')
var db_helper                   = require("./db_helper")
var isBinaryFile                = require("isbinaryfile");
var pgeval
var sqliteeval
var tdeval
var toeval;
var userData
var childProcessName
var nextCallId = 0

var inProcessFilesFn                    = false;
var isWin                               = /^win/.test(process.platform);
var numberOfSecondsIndexFilesInterval   = 5;
var inScan                              = false;
var stmt2                               = null;
var stmt3                               = null;
var setIn                               = null;
var updateProcessTable                  = null;
var lockData                            = null;
var unlockData                          = null;
var stmtInsertIntoCode                  = null;
var stmtUpdateCode                      = null;
var inGetRelatedDocumentHashes          = false;
var inIndexFileRelationshipsFn          = false;
var finishedFindingFolders              = false;
var username                            = "Unknown user";
var dbsearch;
var xdiff;
var lhs;
var rhs;
var stmtInsertIntoRelationships;
var stmtUpdateRelationships2;

var stmtUpdateFolder;
var stmtResetFolders;
var stmtInsertDriver;
var stmtUpdateDriver;
var stmtInsertIntoQueries;

var stmtResetFiles;
var stmtFileChanged;
var stmtInsertIntoMessages;
var stmtInsertIntoFiles;
var stmtInsertIntoFiles2;
var stmtUpdateFileStatus;
var stmtUpdateFileSizeAndShaAndConnectionId;
var stmtUpdateFileProperties;

var stmtInsertIntoContents;
var stmtInsertIntoFolders;
var stmtInsertIntoConnections;
var stmtInsertIntoConnections2;

var stmtInsertIntoIntranetClientConnects;

var stmtInsertInsertIntoQueries;
var stmtUpdateRelatedDocumentCount;
var stmtUpdateRelationships;

var incrJobCount;

var decrJobCount;


var in_when_queries_changes             = false;
var in_when_connections_change          = false;


username = os.userInfo().username.toLowerCase();
//console.log(username);

//dbsearch.run("PRAGMA synchronous=OFF;")
//dbsearch.run("PRAGMA count_changes=OFF;")
//dbsearch.run("PRAGMA journal_mode=MEMORY;")
//dbsearch.run("PRAGMA temp_store=MEMORY;")







processMessagesFromMainProcess();

function processMessagesFromMainProcess() {
    process.on('message', (msg) => {


    if  (msg.message_type == 'init') {

        //console.log('-- Init v3');
        userData            = msg.user_data_path
        childProcessName    = msg.child_process_name

        //console.log("  Child recieved user data path: " + userData)
        var dbPath = path.join(userData, username + '.visi')

        //console.log("  DB path: " + dbPath)
        dbsearch = new sqlite3.Database(dbPath);
        dbsearch.run("PRAGMA journal_mode=WAL;")
        process.send({  message_type:       "database_setup_in_child" ,
                        child_process_name:  childProcessName
                        });


        setUpSql()






        } else if (msg.message_type == 'setUpSql') {


             console.log(" --- setUpSql --- ")
             setUpSql();
             processDrivers(init);





     } else if (msg.message_type == "function_call_response") {

         console.log("*) Response received at Scheduler ")
         console.log("*) result generated by call ID: " + msg.called_call_id)
         var callDetails = callList[msg.called_call_id]
         console.log("*) call details: " + JSON.stringify(callDetails,null,2))
         var parentCallId = callDetails.parent_call_id
         console.log("*) parent call ID: " + JSON.stringify(parentCallId,null,2))
         var parentCallDetails = callList[parentCallId]
         console.log("*) parent call details: " + JSON.stringify(parentCallDetails,null,2))
         console.log("*) Response: " + JSON.stringify(msg.result,null,2))


        process.send({  message_type:       "return_response_to_function_caller" ,
                        child_process_name:  parentCallDetails.process_name,
                        callback_index:      msg.callback_index,
                        result:              msg.result
                        });



     } else if (msg.message_type == "processor_free") {

        processesInUse[msg.child_process_name] = false
        decrJobCount.run(msg.child_process_name)







     } else if (msg.message_type == "function_call_request") {

             dbsearch.serialize(
                 function() {
                     var stmt = dbsearch.all(
                       "SELECT * FROM system_code where driver = ? and on_condition like '%" + msg.method_name + "%'; ",
//zzz
                        msg.driver_name,

                         function(err, results)
                         {
                             if (results) {
                                scheduleJobWithCodeId(  results[0].id,
                                                        msg.args,
                                                        null,
                                                        msg.caller_call_id,
                                                        msg.callback_index)
                                 //callbackFn(results[0].id);
                             } else {
                                 //callbackFn(null)
                             }

                         })
             }, sqlite3.OPEN_READONLY)
             //
             //child_process_name:    msg.child_process_name,
             //driver_name:           msg.driver_name,
             //method_name:           msg.method_name,
             //args:                  msg.args,
             //callback_index:        msg.callback_index







        } else if (msg.message_type == 'startNode') {


             //console.log(" --- Started Node --- ")
             //console.log("     Node ID: " + msg.node_id)
             //console.log("     Process ID: " + msg.child_process_id)
             //console.log("     Started: " + msg.started)
             isRealTimeProcess[msg.node_id] = msg.is_real_time
             processesInUse[msg.node_id] = false
             dbsearch.serialize(
                 function() {
                     dbsearch.run("begin exclusive transaction");
                     updateProcessTable.run(
                         msg.node_id,
                         msg.child_process_id,
                         msg.started,
                         0,
                         msg.is_real_time
                         )
                     dbsearch.run("commit");


                    //process.send({  message_type:       "execute_code_in_exe_child_process" ,
                    //                child_process_name:  msg.node_id,
                    //                old_code:               `console.log("Sent from Scheduler")`
                    //                });


                 })

        }




    });
}




var isRealTimeProcess = new Object()

//-----------------------------------------------------------------------------------------//
//                                                                                         //
//                                        setUpSql                                         //
//                                                                                         //
//   This sets up the SqlLite prepared statements                                          //
//                                                                                         //
//                                                                                         //
//                                                                                         //
//                                                                                         //
//                                                                                         //
//                                                                                         //
//-----------------------------------------------------------------------------------------//
function setUpSql() {

    incrJobCount = dbsearch.prepare("UPDATE system_process_info SET job_count = job_count + 1, last_driver = ?, last_event = ? WHERE process = ?");

    decrJobCount = dbsearch.prepare("UPDATE system_process_info SET job_count = job_count - 1 WHERE process = ?");


    updateProcessTable = dbsearch.prepare(
        " insert or replace into "+
        "     system_process_info (process, process_id, running_since, job_count, realtime) " +
        " values " +
        "     (?,?,?,?,?)"
    )

    lockData = dbsearch.prepare("UPDATE all_data SET status = 'LOCKED' WHERE id = ?");

    unlockData = dbsearch.prepare("UPDATE all_data SET status = NULL WHERE id = ?");

    stmtInsertIntoCode = dbsearch.prepare(  " insert into system_code " +
                                                "      ( id, on_condition, driver, method, code ) " +
                                                " values " +
                                                "      ( ?,  ?, ? , ?, ?);");

    stmtUpdateCode = dbsearch.prepare(  " update system_code " +
                                                "      set on_condition = ?, "+
                                                "          code         = ? " +
                                                " where  " +
                                                "      id = ?;");
}



function driversFn(callbackFn) {
    dbsearch.serialize(
        function() {
            var result = []
            var stmt = dbsearch.all(
                "SELECT * FROM drivers",

                function(err, results)
                {
                    if (results) {
                        for (var i =0 ; i< results.length; i ++) {
                            var obj = eval(results[i].code)
                            obj.src = results[i].code
                            result.push(obj)
                        }
                        callbackFn( result);
                    } else {
                        callbackFn(null)
                    }

                })
    }, sqlite3.OPEN_READONLY)
}






function processDrivers(  callbackFn  ) {
    console.log("Process drivers")
    console.log("")
    console.log("")
    console.log("")
    console.log("")

    driversFn(function(listOfDrivers) {
        if (listOfDrivers) {
            for (var i=0; i< listOfDrivers.length; i ++) {
                if (listOfDrivers[i].events) {
                    var thisDriverEvents =  Object.keys(listOfDrivers[i].events)
                    if (thisDriverEvents.length > 0  ) {
                        for (var e=0; e< thisDriverEvents.length; e++){
                            var thisEvent = listOfDrivers[i].events[thisDriverEvents[e]]
                            addEventCode(thisDriverEvents[e], listOfDrivers[i].name, listOfDrivers[i].src, thisEvent)

                        }
                    }

                }
            }
            callbackFn()

        }
    })
}

function addEventCode(eventName, driverName, code, listOfEvents) {
    //console.log("--- addEventCode ---")
    //console.log("     eventName: " + eventName)
    //console.log("    driverName: " + driverName)
    //console.log("        driver: " + JSON.stringify(driver,null,2))
    var startIndex = code.indexOf(eventName)
    code = code.substring(startIndex)
    var startIndex = code.indexOf("on:")
    code = code.substring(startIndex + 3).trim()
    var startIndex = code.indexOf("do:")
    var oncode = code.substring(0, startIndex )
    var startIndex = oncode.lastIndexOf(",")
    oncode = oncode.substring(0, startIndex )

    //console.log("    startIndex: " + JSON.stringify(startIndex,null,2))
    //console.log("          on: " + JSON.stringify(oncode,null,2))


    var startIndex = code.indexOf("do:")
    code = code.substring(startIndex + 3)
    var startIndex = code.indexOf("end:")
    code = code.substring(0, startIndex )
    var startIndex = code.lastIndexOf(",")
    code = code.substring(0, startIndex )

    //console.log("          code: " + JSON.stringify(code,null,2))



    dbsearch.serialize(
        function() {
            var result = []
            var stmt = dbsearch.all(
                "SELECT * FROM system_code where driver = ? and method = ?",
                [driverName, eventName],

                function(err, results)
                {
                    if (results.length == 0) {
                        var newId   = uuidv1();
                        dbsearch.serialize(
                            function() {
                                dbsearch.run("begin exclusive transaction");
                                stmtInsertIntoCode.run(
                                    newId,
                                    oncode,
                                    driverName,
                                    eventName,
                                    code)
                                dbsearch.run("commit");
                            })


                    } else {
                        dbsearch.serialize(
                            function() {
                                dbsearch.run("begin exclusive transaction");
                                stmtUpdateCode.run(
                                    oncode,
                                    code,
                                    results[0].id
                                )
                                dbsearch.run("commit");
                            })

                    }

                })
    }, sqlite3.OPEN_READONLY)
}


var functions = new Object()








function init() {
    parseEvents()

    setInterval( findNextJobToRun, 1000)
}







function parseEvents() {

    //console.log("function(executeCode) {")
    parseAllEvents()

}




var inScheduleCode2 = false;
function findNextJobToRun() {
    if (inScheduleCode2) {
        return
    }
    inScheduleCode2 = true

    var code_id = null

    for (var ff = 0; ff < eventList.length; ff++) {
        var cond = eventList[ff]
        code_id = cond.id
        if (cond.condType == "query") {
            testQueryToExecute(cond, code_id)

        }
    }
    inScheduleCode2 = false

}



function testQueryToExecute(cond, code_id) {
    if (cond.condition.where) {
        //console.log("*) Executing SQlite: " + cond.condition.where)
        dbsearch.serialize(
            function() {
                var stmt = dbsearch.all(
                    "SELECT * FROM all_data where " +  cond.condition.where + " and status is NULL LIMIT 1",

                    function(err, results)
                    {
                        if (results) {
                            if (results.length > 0) {

                                dbsearch.serialize(
                                    function() {
                                        dbsearch.run("begin exclusive transaction");
                                        lockData.run(results[0].id)
                                        dbsearch.run("commit",
                                            function() {

                                                console.log("*) INIT -  starting the first job")
                                                scheduleJobWithCodeId(  code_id,  results, null,  null, null )
                                                inScheduleCode2 = false
                                                return
                                            });
                                        })



                            }
                        } else {
                            inScheduleCode2 = false
                        }
                    })
        }, sqlite3.OPEN_READONLY)

    }
}







var processesInUse = new Object()

function scheduleJobWithCodeId(codeId, args, fixedProcessToUse,  parentCallId, callbackIndex) {
    if (fixedProcessToUse) {
        sendJobToProcessName(codeId, args, fixedProcessToUse, parentCallId, callbackIndex)
    } else {
        var processToUse = null
        var processNames = Object.keys(processesInUse)
        for(var processNameIndex = 0 ; processNameIndex < processNames.length; processNameIndex ++) {
            var inUseName = processNames[processNameIndex]
            var isInUse = processesInUse[inUseName]
            //console.log(" select * from system_process_info    ")
            //console.log("    " + JSON.stringify(results,null,2))
            
            if (!isInUse) {
                processToUse = inUseName
                processesInUse[inUseName] = true
                //console.log("    " + JSON.stringify(processToUse,null,2))
                //console.log("    processToUse:" + processToUse.process + " : " + processToUse.job_count)
                sendJobToProcessName(codeId, args, inUseName, parentCallId, callbackIndex)
                break
            }
        }
        if (!processToUse) {
            console.log("Could not find a process to use :() ")
        }
    }

}






function sendToProcess(  id  ,  parentCallId  ,  callbackIndex, processName  ,  driver ,  on_condition  ,  args) {

    var newCallId = nextCallId ++

    callList[  newCallId  ] = {     process_name:       processName,
                                    parent_call_id:     parentCallId        }
    dbsearch.serialize(
        function() {
            dbsearch.run("begin exclusive transaction");
            incrJobCount.run( driver, on_condition, processName )
            dbsearch.run("commit");


           process.send({  message_type:       "execute_code_in_exe_child_process" ,
                           child_process_name:  processName,
                           code_id:             id,
                           args:                args,
                           call_id:             newCallId,
                           callback_index:      callbackIndex
                           });


        })
}


var callList = new Object
function sendJobToProcessName(id, args, processName, parentCallId, callbackIndex) {

    dbsearch.serialize(
        function() {
            var stmt = dbsearch.all(
                "SELECT driver, on_condition FROM system_code where id = ? LIMIT 1",
                id,

                function(err, results)
                {
                    if (results) {
                        if (results.length > 0) {


                            sendToProcess(  id,
                                            parentCallId,
                                            callbackIndex,
                                            processName,
                                            results[0].driver,
                                            results[0].on_condition,
                                            args)



                        }
                    }
                })
    }, sqlite3.OPEN_READONLY)

    }






function parseAllEvents( ) {

    dbsearch.serialize(
        function() {
            var stmt = dbsearch.all(
                "SELECT id, on_condition FROM system_code; ",

                function(err, results)
                {
                    if (results) {
                        for (var tt = 0; tt < results.length; tt ++) {

                            var cond = results[tt].on_condition

                            console.log("")
                            console.log("*) " + cond)

                            var evaledCond = eval("(" +  cond + ")")
                            saveEvent(evaledCond, results[tt].id)
                            console.log("")

                        }

                    }

                })
    }, sqlite3.OPEN_READONLY)
}



var eventList = []


function saveEvent(cond, id) {
    var typeCond =  (typeof cond)
    var saveType = null

    if (typeCond == "string") {
        saveType = "method"

    } else if (typeCond == "object") {
        saveType = "query"

    }
    console.log("*) type: " + saveType)

    eventList.push({condType:       saveType,
                    condition:      cond,
                    id:             id})

}








function fastSql(sql,callbackFn) {
    dbsearch.serialize(
        function() {
            var stmt = dbsearch.all(
                sql,

                function(err, results)
                {
                    callbackFn(results);
                })
    }, sqlite3.OPEN_READONLY)
}
